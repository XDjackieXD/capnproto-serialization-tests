// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: test.capnp

#include "test.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<31> b_8fd8d455f7ea3f36 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     54,  63, 234, 247,  85, 212, 216, 143,
     11,   0,   0,   0,   1,   0,   1,   0,
    196, 174, 140,  19, 229, 246, 191, 133,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 122,   0,   0,   0,
     25,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 101, 115, 116,  46,  99,  97, 112,
    110, 112,  58,  70, 111, 111,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     98,  97, 114,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8fd8d455f7ea3f36 = b_8fd8d455f7ea3f36.words;
#if !CAPNP_LITE
static const uint16_t m_8fd8d455f7ea3f36[] = {0};
static const uint16_t i_8fd8d455f7ea3f36[] = {0};
const ::capnp::_::RawSchema s_8fd8d455f7ea3f36 = {
  0x8fd8d455f7ea3f36, b_8fd8d455f7ea3f36.words, 31, nullptr, m_8fd8d455f7ea3f36,
  0, 1, i_8fd8d455f7ea3f36, nullptr, nullptr, { &s_8fd8d455f7ea3f36, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================


// Foo
constexpr uint16_t Foo::_capnpPrivate::dataWordSize;
constexpr uint16_t Foo::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Foo::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Foo::_capnpPrivate::schema;
#endif  // !CAPNP_LITE



